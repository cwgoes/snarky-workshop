module KVS = {

  type t = field;
  type key = field;
  type value = field;

  let get : store:t -> key:key -> value = fun(~store: t, ~key: key) => {
    0;
  };

  let set : store:t -> key:key -> value:value -> t = fun(~store: t, ~key: key, ~value: value) => {
    0;
  };

  let modify : store:t -> key:key -> func:(value -> value) -> t = fun(~store: t, ~key: key, ~func: value -> value) => {
    0;
  };

};

module INet = {

  type triple('a) = ('a, 'a, 'a);

  type slot =
    | PRI
    | SEC
    | TER;

  type port =
    | None
    | Free (field)
    | Pointer (field, slot);

  type kind =
    | CON
    | DUP
    | ERA
    | WIRE;

  type node =
    Node (kind, triple(port));   

  let node_of_field : elem:field -> node = fun(~elem: field) => {
    Node (CON, (Free (0), Free (0), Free (0)));
  };

  let field_of_node : node:node -> field = fun(~node: node) => {
    0;
  };

  let alloc : store:KVS.t -> field = fun(~store: KVS.t) => {
    // todo nondeterministic, check absence of existing value
    0;
  };

  let slot_of_ports = fun(~ports: triple(port), ~slot: slot) => {
    let (p0, p1, p2) = ports;
    switch (slot) {
      | PRI => p0
      | SEC => p1
      | TER => p2
    };
  };

  let new_node : store:KVS.t -> kind:kind -> ports:triple(port) -> (field, KVS.t) = fun(~store: KVS.t, ~kind: kind, ~ports: triple(port)) => {
    let key = alloc(~store);
    let new_store = KVS.set(~store, ~key, ~value = field_of_node(~node = Node(kind, ports)));
    (key, new_store);
  };

  let remove_node = fun(~store: KVS.t, ~addr: field) => {
    KVS.set(~store, ~key = addr, ~value = 0);
  };

  let field_equal = fun(~f0: field, ~f1: field) => {
    select(Field.equal(f0, f1), ~then_=true, ~else_=false);
  };

  let set_ports = fun(~store: KVS.t, ~addr: field, ~ports: triple(port)) => {
    let elem = KVS.get(~store, ~key = addr);
    let Node (kind, _) = node_of_field(~elem);
    switch (field_equal(~f0 = elem, ~f1 = 0)) {
      | true => store
      | false => KVS.set(~store, ~key = addr, ~value = field_of_node(~node = Node(kind, ports)))
    };
  };

  let relink = fun(~store: KVS.t, ~node: node, ~old_port: slot, ~new_addr: field, ~new_port: slot) => {
    //let Node (_, ports) = node_of_field(~elem = KVS.get(~store, ~key = ));
    store;
  };

  let reduce_step = fun(~store: KVS.t, ~addr: field) => {
    let s0 = store;
    let Node(kind, ports) = node_of_field(~elem = KVS.get(~store = s0, ~key = addr));
    let Pointer(counter_addr, slot) = slot_of_ports(~ports = ports, ~slot = PRI);
    // must be primary slot
    switch (slot) {
      | PRI => ()
      | _ => Boolean.Assert.is_true(0b)
    };
    s0;
    /*
    let Node(counter_kind, counter_ports) = node_of_field(~elem = KVS.get(~store = s0, ~key = counter_addr));
    switch (kind) {
      | CON =>
        switch (counter_kind) {
          | CON => s0
          | ERA => {
            let (e1, s1) = new_node(~store = s0, ~kind = ERA, ~ports = (slot_of_ports(~ports = ports, ~slot = SEC), None, None));
            let (e2, s2) = new_node(~store = s1, ~kind = ERA, ~ports = (slot_of_ports(~ports = ports, ~slot = TER), None, None));
            let s3 = relink(~store = s2, ~node = Node(kind, ports), ~old_port = SEC, ~new_addr = e1, ~new_port = PRI);
            let s4 = relink(~store = s3, ~node = Node(kind, ports), ~old_port = TER, ~new_addr = e2, ~new_port = PRI);
            let s5 = remove_node(~store = s4, ~addr = addr);
            let s6 = remove_node(~store = s5, ~addr = counter_addr);
            s6;
          }
        }
      | DUP =>
        switch (counter_kind) {
          | ERA => {
            let (e1, s1) = new_node(~store = s0, ~kind = ERA, ~ports = (slot_of_ports(~ports = ports, ~slot = SEC), None, None));
            let (e2, s2) = new_node(~store = s1, ~kind = ERA, ~ports = (slot_of_ports(~ports = ports, ~slot = TER), None, None));
            let s3 = relink(~store = s2, ~node = Node(kind, ports), ~old_port = SEC, ~new_addr = e1, ~new_port = PRI);
            let s4 = relink(~store = s3, ~node = Node(kind, ports), ~old_port = TER, ~new_addr = e2, ~new_port = PRI);
            let s5 = remove_node(~store = s4, ~addr = addr);
            let s6 = remove_node(~store = s5, ~addr = counter_addr);
            s6;
          }
          | DUP => s0
        }
      | ERA =>
        switch (counter_kind) {
          | ERA => {
            let s1 = KVS.set(~store = s0, ~key = addr, ~value = 0);
            let s2 = KVS.set(~store = s1, ~key = counter_addr, ~value = 0);
            s2;
          }
        }
      | _ => s0
    };
    */
  };

};

let main = fun(root: field, new_root: field, ()) => {
  let addr = Prover {
    print_endline("Enter address of primary port to reduce: ");
    let s = read_line();
    Field.of_string(s); 
  };
  let expected_root = INet.reduce_step(~store = root, ~addr = addr);
  Field.Assert.equal(expected_root, new_root);
};
